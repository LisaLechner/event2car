car_sd_out <- aggregate(use2$car,list(use2$date),FUN=function(y) sd(y,na.rm=TRUE))
names(car_sd_out) <- c("event_date","sd_car")
car_summary_out <- merge(car_mean_out,car_sd_out)
car_summary_out$ci_lower <- car_summary_out$mean_car - car_summary_out$sd_car * qnorm(0.975) / sqrt(length(use$firm))
car_summary_out$ci_upper <- car_summary_out$mean_car + car_summary_out$sd_car * qnorm(0.975) / sqrt(length(use$firm))
car_summary_out$sd_car <- NULL
cat("**** Summary of event2car_range object ****\n\n",event_dates_out,firms_out,"\n\n")
return(car_summary_out)
}
summary(x)
event_date = c("2016-08-03","2016-09-01","2017-01-01")
View(x)
event2car_range <- function(returns = NULL,regressor = NULL,event_date = NULL,
method = c("mean_adj","mrkt_adj_within","mrkt_adj_out"),
imputation_returns = c("approx","mean","drop","pmm"),
imputation_regressor = c("approx","mean"),
car_lag = 1,car_lead = 5,estimation_period = 150,
range_before = 30, range_after = 30,
output_format = c("zoo","data.frame")){
event_date <- as.Date(event_date)
range <- seq((min(as.Date(event_date))-range_before), (max(as.Date(event_date))+range_after), "days")
# Sanity Checks
method <- match.arg(method)
imputation_returns <- match.arg(imputation_returns)
imputation_regressor <- match.arg(imputation_regressor)
output_format <- match.arg(output_format)
if (NROW(returns) < estimation_period+car_lag+car_lead) {
stop("Length of returns is too short.
Either use a longer returns object or shorten the estimation- or event period.")
}
if (min(stats::time(returns))>=min(event_date)-estimation_period-car_lag | max(stats::time(returns))<=max(event_date)-car_lead){
stop("Length of returns is too short.
Either use a longer returns object or shorten the estimation- or event period.")
}
if (method %in% c("mrkt_adj_within","mrkt_adj_out")){
if (!is.null(ncol(regressor))) {
regressor <- regressor[ ,1]
}
if (NROW(returns) != NROW(regressor)) {
stop("Length of returns is not equal to length of regressor")
}
if (NROW(regressor) < estimation_period+car_lag+car_lead) {
stop("Length of regressor is too short.
Either use a longer returns object or shorten the estimation- or event period.")
}
if (min(stats::time(regressor))>=min(event_date)-estimation_period-car_lag | max(stats::time(regressor))<=max(event_date)-car_lead){
stop("Length of regressor is too short.
Either use a longer regressor object or shorten the estimation- or event period.")
}
if (any(!stats::time(regressor) %in% stats::time(regressor))) {
warning("regressor and returns have different time ranges.")
}
}
# Handling missing data of returns
## mean imputation_returns
if (imputation_returns == "mean") {
if (any(colSums(is.na(returns))>0)) {
missing <- colnames(returns)[colSums(is.na(returns))>0]
warning(paste("Imputed data using mean returns of the following firm(s):",
paste(missing, collapse=' ')))
}
returns <- zoo::na.aggregate(returns,FUN=mean,na.rm=T)
}
## mean imputation_returns
if (imputation_returns == "approx") {
if (any(colSums(is.na(returns))>0)) {
missing <- colnames(returns)[colSums(is.na(returns))>0]
warning(paste("Replace NA values of returns data with interpolated values of the following firm(s):",
paste(missing, collapse=' ')))
}
returns <- zoo::na.approx(returns)
if (any(colSums(is.na(returns))>0)) {
missing <- colnames(returns)[colSums(is.na(returns))>0]
warning(paste("Drop following firm(s) due to too many missing returns data (unable to fill by dint of interpolated values):",
paste(missing, collapse=' ')))
}
returns <- returns[,colSums(is.na(returns))==0]
}
## no imputation_returns: dropping firms with NAs
if (imputation_returns == "drop") {
if (any(colSums(is.na(returns))>0)) {
missing <- colnames(returns)[colSums(is.na(returns))>0]
warning(paste("Drop following firm(s) due to missing returns data:",
paste(missing, collapse=' ')))
}
if (any(ncol(returns)<2|is.null(ncol(returns))) & sum(is.na(returns))>0) {
stop("All firms dropped due to missing data. No data to estimate cumulative abnormal returns.")
} else {
returns <- returns[,colSums(is.na(returns))==0]
}
}
## pmm: predictive mean matching
if (imputation_returns == "pmm") {
if (ncol(returns)==1) {
stop("Predictive mean matching requires at least two firms in the data.")
}
if (requireNamespace("mice", quietly = TRUE)) {
if (any(colSums(is.na(returns))>0)) {
missing <- colnames(returns)[colSums(is.na(returns))>0]
warning(paste("Impute returns data using predictive mean matching of the following firm(s):",
paste(missing, collapse=' ')))
}
dates_returns <- stats::time(returns)
returns <- mice::complete(mice::mice(returns,method="pmm",printFlag = FALSE))
row.names(returns) <- dates_returns
returns <- zoo::zoo(returns)
zoo::index(returns) <- dates_returns
} else {
stop("'mice' package not installed. Choose another imputation method for returns object or run install.packages('mice')")
}
}
if (any(is.na(returns)|is.nan(returns)|is.infinite(returns))) {
stop("Returns data has NA/NaN/Inf value(s) and no imputation has been choosen.")
}
# Handling missing data of regressor
if (method %in% c("mrkt_adj_within","mrkt_adj_out")){
## mean imputation_regressor
if (imputation_regressor == "mean") {
if (sum(is.na(regressor))>0) {
warning("Impute data using mean regressor.")
}
regressor <- zoo::na.aggregate(regressor,FUN=mean,na.rm=T)
}
## mean imputation_regressor
if (imputation_regressor == "approx") {
if (sum(is.na(regressor))>0) {
warning("Replace NA values in regressor with interpolated values.")
}
regressor <- zoo::na.approx(regressor,na.rm=T)
}
if (any(is.na(regressor)|is.nan(regressor)|is.infinite(regressor))) {
stop("Regressor has NA/NaN/Inf value(s) and no imputation has been choosen.")
}
}
temp <- lapply(range,function(event){
## Mean adjusted model
if (method == "mean_adj") {
### data prep
#### estimation period data
y <- window(returns, start=(event-estimation_period-car_lag),end=(event-car_lag))
#### event period data
y2 <- window(returns, start=(event-car_lag),end=(event+car_lead))
### abnormal returns
if (any(is.null(ncol(y)),ncol(y)==1)) {
car <- sum(as.numeric(y2) - mean(as.numeric(y)))
} else {
ar <- sapply(seq_len(ncol(y)),function(i){
as.numeric(y2[,i]) - mean(as.numeric(y[,i]))})
car <- colSums(ar)
}
}
## Market adjusted (within sample) model
if (method == "mrkt_adj_within") {
### data prep
y <- window(returns, start=(event-estimation_period-car_lag),end=(event+car_lead))
x1 <- window(regressor, start=(event-estimation_period-car_lag),end=(event+car_lead))
x2 <- stats::time(y) %in% seq(as.Date(event-car_lag), as.Date(event+car_lead), "days")
### regression inkl. event period
z <- stats::lm(y~x1+x2)
### output
if (any(is.null(ncol(y)),ncol(y)==1)) {
car <- stats::coef(z)[[3]]* sum(ifelse(x2==TRUE,1,0))
} else {
car <- stats::coef(z)[3,] * sum(ifelse(x2==TRUE,1,0))
}
}
## Market adjusted (within sample) model
if (method == "mrkt_adj_out") {
### data prep
#### estimation period data
y <- stats::window(returns, start=(event-estimation_period-car_lag),end=(event-car_lag))
x1 <- stats::window(regressor, start=(event-estimation_period-car_lag),end=(event-car_lag))
#### event period data
y2 <- stats::window(returns, start=(event-car_lag),end=(event+car_lead))
x12 <- stats::window(regressor, start=(event-car_lag),end=(event+car_lead))
### regression
z <- stats::lm(y~x1)
### prediction or abnormal returns
if (any(is.null(ncol(y)),ncol(y)==1)) {
ar <- sapply(seq_along(x12),function(i){
y2[[i]] - (stats::coef(z)[[1]] + stats::coef(z)[[2]] * x12[[i]])
})
car <- sum(ar)
} else {
ar <- sapply(seq_along(x12),function(i){
y2[i, ] - (stats::coef(z)[1, ] + stats::coef(z)[2, ] * x12[[i]])
})
car <- rowSums(ar)
}
}
names(car) <- names(y)
if (is.null(names(car))) {
names(car) <- seq_len(length(car))
}
return(car)
})
temp <- unlist(temp)
temp <- data.frame(firm=names(temp),car=temp)
temp <- temp[order(temp$firm),]
if (nrow(temp) %% length(range) ==0) {
temp$date <- rep(range,nrow(temp)/length(range))
} else {
stop("Unbalanced dataset.")
}
if (output_format=="zoo") {
temp2 <- stats::reshape(temp,timevar ="firm",idvar="date",
direction="wide")
names(temp2) <- gsub("car.","",names(temp2))
temp3 <- zoo::zoo(temp2[2:ncol(temp2)])
zoo::index(temp3) <- temp2[[1]]
}
if (output_format=="data.frame") {
temp3 <- temp
}
out <- list(temp3,event_date,as.character(unique(temp$firm)),method,imputation_returns,imputation_regressor)
names(out) <- c("car_timeseries","event_date","firm","method","imputation_returns","imputation_regressor")
class(out) <- "event2car_range"
return(out)
}
# Test
x <- event2car_range(returns,regressor,
event_date = c("2016-08-03","2016-09-01","2017-01-01"),
method = "mean_adj",
imputation_returns = "approx",
imputation_regressor = "approx",
car_lag = 1,car_lead = 5,estimation_period = 150,
range_before = 30, range_after = 30,
output_format = "zoo")
plot.event2car_range <- function(x = x,
event_color = "red",
event_linetype = "twodash",
event_size = 1,
event_label_size = 3,
line_color = "black",
background_color = "gray",
background_alpha = 0.5,
point_size = 0.2,
point_alpha = 0.1,
axis_text_size = 8,
axis_title_size = 10,
show_method = TRUE){
if (!class(x) = "event2car_range") {
stop("Plot works for event2car_range objects only.")
}
if (class(x$car_timeseries) == "zoo") {
use <- data.frame(x$car_timeseries)
use$date <- row.names(use)
use <- stats::reshape(use, idvar="date",
varying = 1:(ncol(use)-1),
v.names = "car",
direction="long")
row.names(use) <- NULL
names(use) <- c("date","firm","car")
use$date <- as.Date(use$date)
}
if (class(x$car_timeseries) == "data.frame") {
use <- x$car_timeseries
row.names(use) <- NULL
}
use$firm <- as.character(use$firm)
use$event <- ifelse(use$date %in% x$event_date,1,0)
use$label <- ifelse(use$event == 1 & use$firm %in% unique(use$firm)[1], as.character(use$date),NA)
if (x$method == "mean_adj") {
method = "Mean-adjusted model"
}
if (x$method == "mrkt_adj_within") {
method = "Market-adjusted model\n(within estimation)"
}
if (x$method == "mrkt_adj_out") {
method = "Market-adjusted model\n(out-of-sample estimation)"
}
p <- ggplot2::ggplot(use,aes(date,car,label = label))+
geom_rect(mapping=aes(xmin=min(use$date), xmax=max(use$date), ymin=0, ymax=Inf), color=background_color,
alpha=background_alpha,fill=background_color)+
geom_point(aes(color=firm),alpha=0.1)+
geom_smooth(aes(color=firm),method="loess",alpha=point_alpha,size=point_size)+
geom_smooth(color=line_color,method="loess")+
geom_vline(xintercept = unique(use$date[use$event==1]),
color=event_color,linetype=event_linetype,size=event_size)+
geom_label(aes(y=max(use$car)),size=event_label_size,na.rm=TRUE) +
scale_color_grey(start = 0.9, end = 0.1) +
scale_x_date(labels = date_format("%Y-%m"))+
labs(y="Cumulative Abnormal Return",x="",
color="",
title = method)+
theme_minimal()+
theme(legend.position = "none",
panel.grid = element_blank(),
axis.text = element_text(size=axis_text_size),
axis.title = element_text(size=axis_title_size))
p
}
plot.event2car_range <- function(x = x,
event_color = "red",
event_linetype = "twodash",
event_size = 1,
event_label_size = 3,
line_color = "black",
background_color = "gray",
background_alpha = 0.5,
point_size = 0.2,
point_alpha = 0.1,
axis_text_size = 8,
axis_title_size = 10,
show_method = TRUE){
if (!class(x) = "event2car_range") {
stop("Plot works for event2car_range objects only.")
}
if (class(x$car_timeseries) == "zoo") {
use <- data.frame(x$car_timeseries)
use$date <- row.names(use)
use <- stats::reshape(use, idvar="date",
varying = 1:(ncol(use)-1),
v.names = "car",
direction="long")
row.names(use) <- NULL
names(use) <- c("date","firm","car")
use$date <- as.Date(use$date)
}
if (class(x$car_timeseries) == "data.frame") {
use <- x$car_timeseries
row.names(use) <- NULL
}
use$firm <- as.character(use$firm)
use$event <- ifelse(use$date %in% x$event_date,1,0)
use$label <- ifelse(use$event == 1 & use$firm %in% unique(use$firm)[1], as.character(use$date),NA)
if (x$method == "mean_adj") {
method = "Mean-adjusted model"
}
if (x$method == "mrkt_adj_within") {
method = "Market-adjusted model\n(within estimation)"
}
if (x$method == "mrkt_adj_out") {
method = "Market-adjusted model\n(out-of-sample estimation)"
}
p <- ggplot2::ggplot(use,aes(date,car,label = label))+
geom_rect(mapping=aes(xmin=min(use$date), xmax=max(use$date), ymin=0, ymax=Inf), color=background_color,
alpha=background_alpha,fill=background_color)+
geom_point(aes(color=firm),alpha=0.1)+
geom_smooth(aes(color=firm),method="loess",alpha=point_alpha,size=point_size)+
geom_smooth(color=line_color,method="loess")+
geom_vline(xintercept = unique(use$date[use$event==1]),
color=event_color,linetype=event_linetype,size=event_size)+
geom_label(aes(y=max(use$car)),size=event_label_size,na.rm=TRUE) +
scale_color_grey(start = 0.9, end = 0.1) +
scale_x_date(labels = date_format("%Y-%m"))+
labs(y="Cumulative Abnormal Return",x="",
color="",
title = method)+
theme_minimal()+
theme(legend.position = "none",
panel.grid = element_blank(),
axis.text = element_text(size=axis_text_size),
axis.title = element_text(size=axis_title_size))
p
}
plot.event2car_range <- function(x = x,
event_color = "red",
event_linetype = "twodash",
event_size = 1,
event_label_size = 3,
line_color = "black",
background_color = "gray",
background_alpha = 0.5,
point_size = 0.2,
point_alpha = 0.1,
axis_text_size = 8,
axis_title_size = 10,
show_method = TRUE){
if (!class(x) = "event2car_range") {
stop("Plot works for event2car_range objects only.")
}
plot.event2car_range <- function(x = x,
event_color = "red",
event_linetype = "twodash",
event_size = 1,
event_label_size = 3,
line_color = "black",
background_color = "gray",
background_alpha = 0.5,
point_size = 0.2,
point_alpha = 0.1,
axis_text_size = 8,
axis_title_size = 10,
show_method = TRUE){
if (!class(x) = "event2car_range") {
stop("Plot works for event2car_range objects only.")
}
plot.event2car_range <- function(x = x,
event_color = "red",
event_linetype = "twodash",
event_size = 1,
event_label_size = 3,
line_color = "black",
background_color = "gray",
background_alpha = 0.5,
point_size = 0.2,
point_alpha = 0.1,
axis_text_size = 8,
axis_title_size = 10,
show_method = TRUE){
if (!class(x) == "event2car_range") {
stop("Plot works for event2car_range objects only.")
}
if (class(x$car_timeseries) == "zoo") {
use <- data.frame(x$car_timeseries)
use$date <- row.names(use)
use <- stats::reshape(use, idvar="date",
varying = 1:(ncol(use)-1),
v.names = "car",
direction="long")
row.names(use) <- NULL
names(use) <- c("date","firm","car")
use$date <- as.Date(use$date)
}
if (class(x$car_timeseries) == "data.frame") {
use <- x$car_timeseries
row.names(use) <- NULL
}
use$firm <- as.character(use$firm)
use$event <- ifelse(use$date %in% x$event_date,1,0)
use$label <- ifelse(use$event == 1 & use$firm %in% unique(use$firm)[1], as.character(use$date),NA)
if (x$method == "mean_adj") {
method = "Mean-adjusted model"
}
if (x$method == "mrkt_adj_within") {
method = "Market-adjusted model\n(within estimation)"
}
if (x$method == "mrkt_adj_out") {
method = "Market-adjusted model\n(out-of-sample estimation)"
}
p <- ggplot2::ggplot(use,aes(date,car,label = label))+
geom_rect(mapping=aes(xmin=min(use$date), xmax=max(use$date), ymin=0, ymax=Inf), color=background_color,
alpha=background_alpha,fill=background_color)+
geom_point(aes(color=firm),alpha=0.1)+
geom_smooth(aes(color=firm),method="loess",alpha=point_alpha,size=point_size)+
geom_smooth(color=line_color,method="loess")+
geom_vline(xintercept = unique(use$date[use$event==1]),
color=event_color,linetype=event_linetype,size=event_size)+
geom_label(aes(y=max(use$car)),size=event_label_size,na.rm=TRUE) +
scale_color_grey(start = 0.9, end = 0.1) +
scale_x_date(labels = date_format("%Y-%m"))+
labs(y="Cumulative Abnormal Return",x="",
color="",
title = method)+
theme_minimal()+
theme(legend.position = "none",
panel.grid = element_blank(),
axis.text = element_text(size=axis_text_size),
axis.title = element_text(size=axis_title_size))
p
}
plot(x)
library(scales)
plot(x)
rm(event_date)
plot(x)
summary(x)
names(x)
summary.event2car_range <- function(x=x){
if (!class(x) == "event2car_range"){
stop("Summary works for event2car_range objects only.")
}
if (class(x$car_timeseries) == "zoo") {
use <- data.frame(x$car_timeseries)
use$date <- row.names(use)
use <- stats::reshape(use, idvar="date",
varying = 1:(ncol(use)-1),
v.names = "car",
direction="long")
row.names(use) <- NULL
names(use) <- c("date","firm","car")
use$date <- as.Date(use$date)
}
if (class(x$car_timeseries) == "data.frame") {
use <- x$car_timeseries
row.names(use) <- NULL
}
use$firm <- as.character(use$firm)
event_dates_out <- paste(length(x$event_date),"event dates:",paste(as.character(x$event_date),collapse=", "),"\n \n")
firms_out <- paste(length(x$firm),"firms:",paste(as.character(x$firm),collapse=", "))
use2 <- use[use$date %in% x$event_date,]
car_mean_out <- aggregate(use2$car,list(use2$date),FUN=function(y) mean(y,na.rm=TRUE))
names(car_mean_out) <- c("event_date","mean_car")
car_sd_out <- aggregate(use2$car,list(use2$date),FUN=function(y) sd(y,na.rm=TRUE))
names(car_sd_out) <- c("event_date","sd_car")
car_summary_out <- merge(car_mean_out,car_sd_out)
car_summary_out$ci_lower <- car_summary_out$mean_car - car_summary_out$sd_car * qnorm(0.975) / sqrt(length(use$firm))
car_summary_out$ci_upper <- car_summary_out$mean_car + car_summary_out$sd_car * qnorm(0.975) / sqrt(length(use$firm))
car_summary_out$sd_car <- NULL
cat("**** Summary of event2car_range object ****\n\n",event_dates_out,firms_out,"\n\n")
return(car_summary_out)
}
summary(x)
x
event2car_range(returns=returns_firms,regressor=return_indx,
imputation_returns="mean",
event_date=trumpelection,method="mean_adj")
load("~/Dropbox/tech/R_programming/az/code/event2car/data/tech_returns.rda")
trumpelection <- as.Date("2016-11-08")
returns_firms <- tech_returns[,2:19]
return_indx <- tech_returns[,1]
# mean adjusted model
event2car_range(returns=returns_firms,regressor=return_indx,
imputation_returns="mean",
event_date=trumpelection,method="mean_adj")
# mean adjusted model
effect_trump <- event2car_range(returns=returns_firms,regressor=return_indx,
imputation_returns="mean",
event_date=trumpelection,method="mean_adj")
plot(effect_trump)
summary(effect_trump)
