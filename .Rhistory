sum(x == 2) * (colMeans(y[x == 2,]) - colMeans(y[x == 1, ]))
length(x2) * (colMeans(y[x2,]) - colMeans(y[x1, ]))
## v1b: integer i5ndex vectors of lengths n1 and n2
x1 <- which(x == 1)
x2 <- which(x == 2)
system.time(length(x2) * (colMeans(y[x2,]) - colMeans(y[x1, ]))) # this is the fastest
y <- cbind(rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140))
## indicator: 0 = not considered, 1 = estimation, 2 = prediction
x <- rep(c(0, 1, 0, 2), c(10, 120, 5, 5))
## v1a: matrix operations with logical index vector (of length n)
system.time(sum(x == 2) * (colMeans(y[x == 2,]) - colMeans(y[x == 1, ])))
## v1b: integer i5ndex vectors of lengths n1 and n2
x1 <- which(x == 1)
x2 <- which(x == 2)
system.time(length(x2) * (colMeans(y[x2,]) - colMeans(y[x1, ]))) # this is the fastest
y <- cbind(rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140))
## indicator: 0 = not considered, 1 = estimation, 2 = prediction
x <- rep(c(0, 1, 0, 2), c(10, 120, 5, 5))
## v1a: matrix operations with logical index vector (of length n)
system.time(sum(x == 2) * (colMeans(y[x == 2,]) - colMeans(y[x == 1, ])))
## v1b: integer i5ndex vectors of lengths n1 and n2
x1 <- which(x == 1)
x2 <- which(x == 2)
system.time(length(x2) * (colMeans(y[x2,]) - colMeans(y[x1, ]))) # this is the fastest
## v1a: matrix operations with logical index vector (of length n)
system.time(sum(x == 2) * (colMeans(y[x == 2,]) - colMeans(y[x == 1, ])))
y <- cbind(rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140),
rnorm(140), rnorm(140), rnorm(140), rnorm(140), rnorm(140))
## indicator: 0 = not considered, 1 = estimation, 2 = prediction
x <- rep(c(0, 1, 0, 2), c(10, 120, 5, 5))
## v1a: matrix operations with logical index vector (of length n)
system.time(sum(x == 2) * (colMeans(y[x == 2,]) - colMeans(y[x == 1, ])))
## v1b: integer i5ndex vectors of lengths n1 and n2
x1 <- which(x == 1)
## v1a: matrix operations with logical index vector (of length n)
system.time(sum(x == 2) * (colMeans(y[x == 2,]) - colMeans(y[x == 1, ])))
## indicator: 0 = not considered, 1 = estimation, 2 = prediction
x <- rep(c(0, 1, 0, 2), c(10, 120, 5, 5))
## v1a: matrix operations with logical index vector (of length n)
system.time(sum(x == 2) * (colMeans(y[x == 2,]) - colMeans(y[x == 1, ])))
## v1b: integer i5ndex vectors of lengths n1 and n2
x1 <- which(x == 1)
x2 <- which(x == 2)
system.time(length(x2) * (colMeans(y[x2,]) - colMeans(y[x1, ]))) # this is the fastest
## v2: multivariate linear model
xx <- cbind(1, as.numeric(x == 2))
system.time(sum(x == 2) * lm.fit(xx[x > 0,], y[x > 0, ])$coefficients[2,])
sum(x == 2) * lm.fit(xx[x > 0,], y[x > 0, ])$coefficients[2,]
xx[x > 0,]
y[x > 0, ]
View(y)
xx[x > 0,]
system.time(sum(x == 2) * lm.fit(xx[x > 0,], y)$coefficients[2,])
sum(x == 2) * lm.fit(xx[x > 0,], y[x > 0, ])$coefficients[2,]
sum(x == 2)
lm.fit(xx[x > 0,], y[x > 0, ])$coefficients[2,]
lm.fit(xx[x > 0,], y[x > 0, ])
k <- lm.fit(xx[x > 0,], y[x > 0, ])
View(k)
k[["coefficients"]]
k[["residuals"]]
k$rank
k$df.residual
k <- r
r <- k
p <- z$rank
rm(r)
z <- k
p <- z$rank
rdf <- z$df.residual
(is.null(z$terms)
)
z$terms
if (is.null(z$terms))
)
if (is.null(z$terms))
stop("invalid 'lm' object:  no 'terms' component")
qr(z)
qr.lm(z)
r <- z$residuals
f <- z$fitted.values
w <- z$weights
w
mss <- if (attr(z$terms, "intercept"))
sum((f - mean(f))^2) else sum(f^2)
rss <- sum(r^2)
attr(z$terms, "intercept")
z$df.residual
z$qr
z$residuals
z$terms
f
r
sum((f - mean(f))^2) else sum(f^2)
f
mean(f)
mean(f))^2
f - mean(f)
sum((f - mean(f))^2)
sum(r^2)
r
z <- lm.fit(xx[x > 0,], y[x > 0, ])
z
r <- z$residuals
View(r)
f <- z$fitted.values
colMeans(f)
(f - colMeans(f)
)
Colsum((f - colMeans(f))^2)
mss <- Colsums((f - colMeans(f))^2)
mss <- colSums((f - colMeans(f))^2)
r^2
rss <- colSums(r^2)
mss <- colSums((f - colMeans(f))^2)
rss <- colSums(r^2)
rdf <- z$df.residual
rdf
View(k)
resvar <- rss/rdf
mss + rss
mss/(mss + rss)
r.squared <- mss/(mss + rss)
?chol2inv
?qr.lm
z$qr
sign(z)
sign(z$coefficients)
coef(z)
seq_along(coef(z))
z$qr
1:2 < z$qr
# se
f
View(xx)
# se
f - y
View(f)
as.numeric(x == 2)
xx[x > 0,]
View(xx)
x > 0
length(x > 0)
TRUE(x > 0)
table(x > 0)
table(sum(x > 0))
(sum(x > 0))
# se
f - y[x > 0,]
# se
(f - y[x > 0,])^2
# se
colSums(f - y[x > 0,])^2
# se
colSums(f - y[x > 0,])^2 / length(z$fitted.values)
length(z$fitted.values)
# se
colSums(f - y[x > 0,])^2
nrow(f)
rdf
colSums(f - y[x > 0,])^2 / rdf
# se
sqrt(colSums(f - y[x > 0,])^2 / rdf)
xx[x > 0,]
xx[x>0,]
xx[x>0,2]
mean(xx[x>0,2])
xx[x>0,2]
ssx <- (xx[x>0,2] - mean(xx[x>0,2]))
ssx
ssx <- sum(xx[x>0,2] - mean(xx[x>0,2])^2)
ssx
seb <- sem/ssx
# se
sem <- sqrt(colSums(f - y[x > 0,])^2 / rdf)
ssx <- sum(xx[x>0,2] - mean(xx[x>0,2])^2)
seb <- sem/sqrt(ssx)
seb
c <- lm.fit(xx[x > 0,], y[x > 0, ])$coefficients[2,]
c
c/seb
length(time(estimation_period))
length(time(event_period))
as.numeric(x == 2)
x
# market adjusted (within sample)
xx <- cbind(x0=1,x1=c(rep(0,length(estimation_period)),rep(0,length(event_period))))
View(xx)
nrow(estimation_period)
# market adjusted (within sample)
xx <- cbind(x0=1,x1=c(rep(0,nrow(estimation_period)),rep(0,nrow(event_period))))
View(xx)
nrow(event_period)
rep(1,nrow(event_period)
)
# market adjusted (within sample)
xx <- cbind(x0=1,x1=c(rep(0,nrow(estimation_period)),rep(1,nrow(event_period))))
View(xx)
x
lm.fit(xx, rbind(estimation_period,event_period))$coefficients[2,]
View(estimation_period)
View(event_period)
regressor
nrow(regressor)
length(time(regressor))
relevant_regressor <- window(regressor, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
View(relevant_regressor)
(event_date-estimation_period-car_lag)
estimation_period=250
relevant_regressor <- window(regressor, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
View(relevant_regressor)
nrow(relevant_regressor)
length(time(relevant_regressor))
relevant_return <- window(regressor, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
View(relevant_return)
relevant_return <- window(returns, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
View(relevant_return)
(event_date-car_lag)
(event_date+car_lead)
(event_date-estimation_period-car_lag)
estimation_period-car_lag
relevant_regressor
length(relevant_return <- window(returns, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
relevant_regressor <- window(regressor, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
)
length(relevant_regressor)
nrow(relevant_regressor)
# regression
xx <- cbind(x0=1,x1=relevant_regressor,x2=c(rep(0,length(relevant_regressor)-tradingdays),rep(1,tradingdays)))
(length(relevant_regressor)-tradingdays)
length(relevant_regressor)
nrow(relevant_regressor)
tradingdays
c((event_date-car_lag):(event_date+car_lead))
tradingdays <- times(relevant_return) %in% c(as.Date(event_date-car_lag):as.Date(event_date+car_lead))
as.Date(event_date-car_lag)
as.Date(event_date+car_lead)
as.Date(event_date-car_lag):as.Date(event_date+car_lead)
tradingdays <- times(relevant_return) %in% as.Date(c(as.Date(event_date-car_lag):as.Date(event_date+car_lead)))
?as.Date
tradingdays <- times(relevant_return) %in% as.Date(c((event_date-car_lag):(event_date+car_lead)),origin="2000-01-01")
seq(as.Date(event_date-car_lag), as.Date(event_date+car_lead), "days")
tradingdays <- times(relevant_return) %in% seq(as.Date(event_date-car_lag), as.Date(event_date+car_lead), "days")
# data prep
relevant_return <- window(returns, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
tradingdays <- times(relevant_return) %in% seq(as.Date(event_date-car_lag), as.Date(event_date+car_lead), "days")
tradingdays <- time(relevant_return) %in% seq(as.Date(event_date-car_lag), as.Date(event_date+car_lead), "days")
tradingdays
# regression
xx <- cbind(x0=1,x1=relevant_regressor,x2=ifelse(tradingdays==TRUE,1,0))
ifelse(tradingdays==TRUE,1,0)
relevant_regressor
# regression
xx <- cbind(x0=1,x1=as.numeric(relevant_regressor),x2=ifelse(tradingdays==TRUE,1,0))
View(xx)
lm.fit(xx, relevant_return[1,])$coefficients[2,]
relevant_return[1,]
lm.fit(xx, relevant_return[,1])$coefficients[2,]
relevant_return[,1]
length(relevant_return[,1])
lm.fit(xx, relevant_return[,1])
lm.fit(xx, relevant_return[,1])$coefficients
lm.fit(xx, relevant_return[,1:2])$coefficients[2,]
lm.fit(xx, relevant_return[,1])$coefficients[2,]
lm.fit(xx, relevant_return[,1])$coefficients
lm.fit(xx, relevant_return[,c(1,2)])$coefficients
lm.fit(xx, relevant_return[,c(1,3)])$coefficients
lm.fit(xx, relevant_return[,c(1,3)])$coefficients[2,]
k <- lm.fit(xx, relevant_return[,c(1,3)])
coef(k)
coef(k)[1]
coef(k)[1,]
# data prep
y <- window(returns, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
x1 <- window(regressor, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
x2 <- time(relevant_return) %in% seq(as.Date(event_date-car_lag), as.Date(event_date+car_lead), "days")
# regression
xx <- cbind(x0=1,x1=as.numeric(x1),x2=ifelse(x2==TRUE,1,0))
z <- lm.fit(xx, y[,c(1,3)])
coef(z)
View(z)
z <- lm.fit(xx, y[,c(1,3)],na.action=na.omit)
z
coef(z)
z <- lm.fit(xx, y,na.action=na.omit)
?lm.fit
z <- lm(xx, y)
is.na(y)
any(is.na(y))
apply(y, is.na(), any)
apply(y, 1, any(is.na()))
rowSums(is.na(y))
rowSums(is.na(y),na.rm = T)
o <- is.na(y)
View(o)
apply(is.na(y),1,any)
View(o)
table(o[1])
table(o[2,])
table(o[3,])
table(o[4,])
table(o[,1])
table(o[,2])
apply(is.na(y),2,any)
w[!is.na(w)] <- 1
w[is.na(w)] <- 0
w <- is.na(y)
w[!is.na(w)] <- 1
w[is.na(w)] <- 0
w <- is.na(y)
w[w==FALSE] <- 1
w[w==TRUE] <- 0
View(w)
w <- is.na(y)
View(w)
w==FALSE
w[w==FALSE] <- 1
View(w)
w <- is.na(y)
w[w==FALSE,] <- 1
w <- ifelse(is.na(y),0,1)
View(w)
y[is.na(y)] <- 0
z <- lm.fit(xx, y,w)
View(y)
# data prep
y <- window(returns, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
y <- na.fill(y,fill=0)
?na.fill
y <- zoo::na.fill(y,fill=0)
View(y)
z <- lm.fit(xx, y,w)
coef(z#)
)
coef(z)
# data prep
y <- window(returns, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
y[,2]
xx[!is.na(y[,2])]
!is.na(y[,2])
z <- lm.fit(xx[!is.na(y[,2])],y[!is.na(y[,2]),2])
y[!is.na(y[,2]),2]
xx[!is.na(y[,2])]
class(xx)
z <- lm.fit(as.matrix(xx[!is.na(y[,2])]),y[!is.na(y[,2]),2])
as.matrix(xx[!is.na(y[,2])])
which(!is.na(y[,2]))
z <- lm.fit(as.matrix(xx[which(!is.na(y[,2])),]),y[!is.na(y[,2]),2])
coef(z)
# data prep
y <- window(returns, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
y <- zoo::na.locf(y)
View(y)
?zoo:na.locf
library(zoo)
?na.locf
y <- zoo::na.locf(y,fromLast=TRUE)
View(y)
z <- lm.fit(xx, y,w)
coef(z)
# data prep
y <- window(returns, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
x1 <- window(regressor, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
x2 <- time(relevant_return) %in% seq(as.Date(event_date-car_lag), as.Date(event_date+car_lead), "days")
# regression
xx <- cbind(x0=1,x1=as.numeric(x1),x2=ifelse(x2==TRUE,1,0))
z <- lm.fit(as.matrix(xx[which(!is.na(y[,2])),]),y[!is.na(y[,2]),2])
as.matrix(xx[which(!is.na(y[,2])),])
View(y)
z <- lm.fit(as.matrix(xx[which(!is.na(y[,14])),]),y[!is.na(y[,14]),14])
coef(z)
lm(y~xx)
xx <- cbind(x1=as.numeric(x1),x2=ifelse(x2==TRUE,1,0))
lm(y~xx)
# data prep
y <- window(returns, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
x1 <- window(regressor, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
x2 <- time(relevant_return) %in% seq(as.Date(event_date-car_lag), as.Date(event_date+car_lead), "days")
# regression
xx <- cbind(x0=1,x1=as.numeric(x1),x2=ifelse(x2==TRUE,1,0))
z <- lm.fit(xx, y[1,],w)
z <- lm.fit(xx, y[,1],w)
coef(z)
y[,1]
View(y[,1])
# regression
xx <- cbind(x0=1,x1=as.numeric(x1),x2=ifelse(x2==TRUE,1,0))
z <- lm.fit(xx, y[,1],w)
z <- lm.fit(xx, y[,1])
coef(z)
lm(y~xx)
xx <- cbind(x1=as.numeric(x1),x2=ifelse(x2==TRUE,1,0))
lm(y~xx)
View(xx)
# regression
xx <- cbind(x0=1,x1=as.numeric(x1),x2=ifelse(x2==TRUE,1,0))
z <- lm.fit(xx, y[,c(1,3)])
coef(z)
lm(y[,c(1,3)]~xx)
lm(y[]~xx)
?lm
lm(y~xx,na.action=na.exclude)
library(mice)
install.packages("mic")
install.packages("mice")
library(mice)
# data prep
y <- window(returns, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
?mice
xx <- cbind(x1=as.numeric(x1),x2=ifelse(x2==TRUE,1,0))
dt <- mice(cbind(xx,y))
View(dt)
View(cbind(xx,y))
View(xx)
class(xx)
class8y
class(y)
dt <- mice(cbind(zoo(xx),y))
View(dt)
View(cbind(zoo(xx),y))
dt <- mice(zoo(xx),matrix(y))
matrix(y)
length(x)
length(y)
nrow(y)
dt <- mice(zoo(xx),matrix(y,nrow(nrow(y))))
dt <- mice(zoo(xx),matrix(y,nrow=nrow(y)))
dt <- cbind(xx,matrix(y,nrow=nrow(y)))
View(dt)
dt <- mice(dt)
View(dt)
dt <- complete(mice(dt))
dt <- complete(mice(dt))
?complete
dt <- mice::complete(mice(dt))
dt <- mice(dt)
dt <- cbind(xx,matrix(y,nrow=nrow(y)))
dt <- mice(dt)
dt <- complete(dt)
View(dt)
methods(mice)
?mice.impute.2l.bin
?mice.impute.mids
?mice.impute.pmm
?mice.impute.rf
dt <- mice(dt,method="ppm")
dt <- complete(dt)
View(dt)
dt <- mice(y,method="ppm")
?mice
dt <- mice(matrix(y,nrow=nrow(y),method="ppm")
)
dt <- mice(matrix(y,nrow=nrow(y)),method="ppm")
# data prep
y <- window(returns, start=(event_date-estimation_period-car_lag),end=(event_date+car_lead))
xx <- cbind(x1=as.numeric(x1),x2=ifelse(x2==TRUE,1,0))
dt <- mice(matrix(y,nrow=nrow(y)),method="ppm")
dt <- mice(matrix(y,nrow=nrow(y)))
dt <- complete(dt)
View(dt)
names(y)
names(dt) <- c(names(xx),names(y))
names(dt)
xx <- cbind(x1=as.numeric(x1),x2=ifelse(x2==TRUE,1,0))
dt <- cbind(xx,matrix(y,nrow=nrow(y)))
dt <- mice(dt,method="ppm")
dt <- mice(dt,method="pmm")
dt <- complete(dt)
names(dt) <- c(names(xx),names(y))
names(dt)
names(xx)
xx <- cbind(x1=as.numeric(x1),x2=ifelse(x2==TRUE,1,0))
names(dt) <- c("x1","x2",names(y))
lm(dt[3:ncol(dt)]~dt$x1+dt$x2)
lm(dt[3:ncol(dt),]~dt$x1+dt$x2)
lm(dt[,3:ncol(dt)]~dt$x1+dt$x2)
dt[,3:ncol(dt)]
dt$x1
dt$x2
lm(dt[,3:ncol(dt)]~dt$x1+dt$x2)
lm(as.matrix(dt[,3:ncol(dt)])~as.matrix(dt[,1:2]))
