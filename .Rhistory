?as.Date
?data.frame
?data.frame.zoo
?qnorm
?sd
?meanb
?mean
?sqrt
devtools::check(summary)
method("plot")
methods("plot")
?plot.ggplot
?plot.data.frame
?geom_smooth
?stats::loess
devtools::build()
devtools::check()
devtools::build()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
?scale_x_date
devtools::check()
?element_text
?aggregate
devtools::check()
?summary.ggplot
summary.ggplot
?summary.lm
plot
?NextMethod
#'  element_text element_blank
#' @importFrom scales date_format
#' @examples
#' trumpelection <- as.Date("2016-11-08")
#' returns_firms <- tech_returns[,2:19]
#' return_indx <- tech_returns[,1]
#' effect_trump <- event2car_range(returns=returns_firms,regressor=return_indx,
#'                                 imputation_returns="mean",
#'                                 event_date=trumpelection,method="mean_adj")
#' plot(effect_trump)
plot.event2car_range <- function(object,
event_color = "red",
event_linetype = "twodash",
event_size = 1,
event_label_size = 3,
line_color = "black",
background_color = "gray",
background_alpha = 0.5,
point_size = 0.2,
point_alpha = 0.1,
axis_text_size = 8,
axis_title_size = 10,
show_method = TRUE){
NextMethod("plot")
if (!class(object) == "event2car_range") {
stop("Plot works for event2car_range objects only.")
}
if (class(object$car_timeseries) == "zoo") {
use <- data.frame(object$car_timeseries)
use$date <- row.names(use)
use <- stats::reshape(use, idvar="date",
varying = 1:(ncol(use)-1),
v.names = "car",
direction="long")
row.names(use) <- NULL
names(use) <- c("date","firm","car")
use$date <- as.Date(use$date)
}
if (class(object$car_timeseries) == "data.frame") {
use <- object$car_timeseries
row.names(use) <- NULL
}
use$firm <- as.character(use$firm)
use$event <- ifelse(use$date %in% object$event_date,1,0)
use$label <- ifelse(use$event == 1 & use$firm %in% unique(use$firm)[1], as.character(use$date),NA)
if (show_method==TRUE) {
if (object$method == "mean_adj") {
method = "Mean-adjusted model"
}
if (object$method == "mrkt_adj_within") {
method = "Market-adjusted model\n(within estimation)"
}
if (object$method == "mrkt_adj_out") {
method = "Market-adjusted model\n(out-of-sample estimation)"
}
} else {method = ""}
p <- ggplot2::ggplot(use,aes(date,car,label = label))+
geom_rect(mapping=aes(xmin=min(use$date), xmax=max(use$date), ymin=0, ymax=Inf), color=background_color,
alpha=background_alpha,fill=background_color)+
geom_point(aes(color=firm),alpha=0.1)+
geom_smooth(aes(color=firm),method="loess",alpha=point_alpha,size=point_size)+
geom_smooth(color=line_color,method="loess")+
geom_vline(xintercept = unique(use$date[use$event==1]),
color=event_color,linetype=event_linetype,size=event_size)+
geom_label(aes(y=max(use$car)),size=event_label_size,na.rm=TRUE) +
scale_color_grey(start = 0.9, end = 0.1) +
scale_x_date(labels = date_format("%Y-%m"))+
labs(y="Cumulative Abnormal Return",x="",
color="",
title = method)+
theme_minimal()+
theme(legend.position = "none",
panel.grid = element_blank(),
axis.text = element_text(size=axis_text_size),
axis.title = element_text(size=axis_title_size))
p
}
plot(effect_trump)
#'  element_text element_blank
#' @importFrom scales date_format
#' @examples
#' trumpelection <- as.Date("2016-11-08")
#' returns_firms <- tech_returns[,2:19]
#' return_indx <- tech_returns[,1]
#' effect_trump <- event2car_range(returns=returns_firms,regressor=return_indx,
#'                                 imputation_returns="mean",
#'                                 event_date=trumpelection,method="mean_adj")
#' plot(effect_trump)
plot.event2car_range <- function(object,
event_color = "red",
event_linetype = "twodash",
event_size = 1,
event_label_size = 3,
line_color = "black",
background_color = "gray",
background_alpha = 0.5,
point_size = 0.2,
point_alpha = 0.1,
axis_text_size = 8,
axis_title_size = 10,
show_method = TRUE){
if (!class(object) == "event2car_range") {
stop("Plot works for event2car_range objects only.")
}
if (class(object$car_timeseries) == "zoo") {
use <- data.frame(object$car_timeseries)
use$date <- row.names(use)
use <- stats::reshape(use, idvar="date",
varying = 1:(ncol(use)-1),
v.names = "car",
direction="long")
row.names(use) <- NULL
names(use) <- c("date","firm","car")
use$date <- as.Date(use$date)
}
if (class(object$car_timeseries) == "data.frame") {
use <- object$car_timeseries
row.names(use) <- NULL
}
use$firm <- as.character(use$firm)
use$event <- ifelse(use$date %in% object$event_date,1,0)
use$label <- ifelse(use$event == 1 & use$firm %in% unique(use$firm)[1], as.character(use$date),NA)
if (show_method==TRUE) {
if (object$method == "mean_adj") {
method = "Mean-adjusted model"
}
if (object$method == "mrkt_adj_within") {
method = "Market-adjusted model\n(within estimation)"
}
if (object$method == "mrkt_adj_out") {
method = "Market-adjusted model\n(out-of-sample estimation)"
}
} else {method = ""}
p <- ggplot2::ggplot(use,aes(date,car,label = label))+
geom_rect(mapping=aes(xmin=min(use$date), xmax=max(use$date), ymin=0, ymax=Inf), color=background_color,
alpha=background_alpha,fill=background_color)+
geom_point(aes(color=firm),alpha=0.1)+
geom_smooth(aes(color=firm),method="loess",alpha=point_alpha,size=point_size)+
geom_smooth(color=line_color,method="loess")+
geom_vline(xintercept = unique(use$date[use$event==1]),
color=event_color,linetype=event_linetype,size=event_size)+
geom_label(aes(y=max(use$car)),size=event_label_size,na.rm=TRUE) +
scale_color_grey(start = 0.9, end = 0.1) +
scale_x_date(labels = date_format("%Y-%m"))+
labs(y="Cumulative Abnormal Return",x="",
color="",
title = method)+
theme_minimal()+
theme(legend.position = "none",
panel.grid = element_blank(),
axis.text = element_text(size=axis_text_size),
axis.title = element_text(size=axis_title_size))
p
}
plot(effect_trump)
plot
summary
plot.lm
plot.spec.coherency()
plot.spec.coherency
devtools::check()
devtools::check()
?ignore
#'  element_text element_blank
#' @importFrom scales date_format
#' @examples
#' trumpelection <- as.Date("2016-11-08")
#' returns_firms <- tech_returns[,2:19]
#' return_indx <- tech_returns[,1]
#' effect_trump <- event2car_range(returns=returns_firms,regressor=return_indx,
#'                                 imputation_returns="mean",
#'                                 event_date=trumpelection,method="mean_adj")
#' plot(effect_trump)
plot.event2car_range <- function(x,...,
event_color = "red",
event_linetype = "twodash",
event_size = 1,
event_label_size = 3,
line_color = "black",
background_color = "gray",
background_alpha = 0.5,
point_size = 0.2,
point_alpha = 0.1,
axis_text_size = 8,
axis_title_size = 10,
show_method = TRUE){
if (!class(x) == "event2car_range") {
stop("Plot works for event2car_range xs only.")
}
if (class(x$car_timeseries) == "zoo") {
use <- data.frame(x$car_timeseries)
use$date <- row.names(use)
use <- stats::reshape(use, idvar="date",
varying = 1:(ncol(use)-1),
v.names = "car",
direction="long")
row.names(use) <- NULL
names(use) <- c("date","firm","car")
use$date <- as.Date(use$date)
}
if (class(x$car_timeseries) == "data.frame") {
use <- x$car_timeseries
row.names(use) <- NULL
}
use$firm <- as.character(use$firm)
use$event <- ifelse(use$date %in% x$event_date,1,0)
use$label <- ifelse(use$event == 1 & use$firm %in% unique(use$firm)[1], as.character(use$date),NA)
if (show_method==TRUE) {
if (x$method == "mean_adj") {
method = "Mean-adjusted model"
}
if (x$method == "mrkt_adj_within") {
method = "Market-adjusted model\n(within estimation)"
}
if (x$method == "mrkt_adj_out") {
method = "Market-adjusted model\n(out-of-sample estimation)"
}
} else {method = ""}
p <- ggplot2::ggplot(use,aes(date,car,label = label))+
geom_rect(mapping=aes(xmin=min(use$date), xmax=max(use$date), ymin=0, ymax=Inf), color=background_color,
alpha=background_alpha,fill=background_color)+
geom_point(aes(color=firm),alpha=0.1)+
geom_smooth(aes(color=firm),method="loess",alpha=point_alpha,size=point_size)+
geom_smooth(color=line_color,method="loess")+
geom_vline(xintercept = unique(use$date[use$event==1]),
color=event_color,linetype=event_linetype,size=event_size)+
geom_label(aes(y=max(use$car)),size=event_label_size,na.rm=TRUE) +
scale_color_grey(start = 0.9, end = 0.1) +
scale_x_date(labels = date_format("%Y-%m"))+
labs(y="Cumulative Abnormal Return",x="",
color="",
title = method)+
theme_minimal()+
theme(legend.position = "none",
panel.grid = element_blank(),
axis.text = element_text(size=axis_text_size),
axis.title = element_text(size=axis_title_size))
return(p)
}
plot(effect_trump)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
#'  element_text element_blank
#' @importFrom scales date_format
#' @examples
#' trumpelection <- as.Date("2016-11-08")
#' returns_firms <- tech_returns[,2:19]
#' return_indx <- tech_returns[,1]
#' effect_trump <- event2car_range(returns=returns_firms,regressor=return_indx,
#'                                 imputation_returns="mean",
#'                                 event_date=trumpelection,method="mean_adj")
#' plot(effect_trump)
plot.event2car_range <- function(x,...,
event_color = "red",
event_linetype = "twodash",
event_size = 1,
event_label_size = 3,
line_color = "black",
background_color = "gray",
background_alpha = 0.5,
point_size = 0.2,
point_alpha = 0.1,
axis_text_size = 8,
axis_title_size = 10,
show_method = TRUE){
if (!class(x) == "event2car_range") {
stop("Plot works for event2car_range xs only.")
}
if (class(x$car_timeseries) == "zoo") {
use <- data.frame(x$car_timeseries)
use$date <- row.names(use)
use <- stats::reshape(use, idvar="date",
varying = 1:(ncol(use)-1),
v.names = "car",
direction="long")
row.names(use) <- NULL
names(use) <- c("date","firm","car")
use$date <- as.Date(use$date)
}
if (class(x$car_timeseries) == "data.frame") {
use <- x$car_timeseries
row.names(use) <- NULL
}
use$firm <- as.character(use$firm)
use$event <- ifelse(use$date %in% x$event_date,1,0)
use$label <- ifelse(use$event == 1 & use$firm %in% unique(use$firm)[1], as.character(use$date),NA)
if (show_method==TRUE) {
if (x$method == "mean_adj") {
method = "Mean-adjusted model"
}
if (x$method == "mrkt_adj_within") {
method = "Market-adjusted model\n(within estimation)"
}
if (x$method == "mrkt_adj_out") {
method = "Market-adjusted model\n(out-of-sample estimation)"
}
} else {method = ""}
utils::globalVariables(c("car", "label", "firm"))
p <- ggplot2::ggplot(use,aes(date,car,label = label))+
geom_rect(mapping=aes(xmin=min(use$date), xmax=max(use$date), ymin=0, ymax=Inf), color=background_color,
alpha=background_alpha,fill=background_color)+
geom_point(aes(color=firm),alpha=0.1)+
geom_smooth(aes(color=firm),method="loess",alpha=point_alpha,size=point_size)+
geom_smooth(color=line_color,method="loess")+
geom_vline(xintercept = unique(use$date[use$event==1]),
color=event_color,linetype=event_linetype,size=event_size)+
geom_label(aes(y=max(use$car)),size=event_label_size,na.rm=TRUE) +
scale_color_grey(start = 0.9, end = 0.1) +
scale_x_date(labels = date_format("%Y-%m"))+
labs(y="Cumulative Abnormal Return",x="",
color="",
title = method)+
theme_minimal()+
theme(legend.position = "none",
panel.grid = element_blank(),
axis.text = element_text(size=axis_text_size),
axis.title = element_text(size=axis_title_size))
return(p)
}
plot(effect_trump)
#'  element_text element_blank
#' @importFrom scales date_format
#' @examples
#' trumpelection <- as.Date("2016-11-08")
#' returns_firms <- tech_returns[,2:19]
#' return_indx <- tech_returns[,1]
#' effect_trump <- event2car_range(returns=returns_firms,regressor=return_indx,
#'                                 imputation_returns="mean",
#'                                 event_date=trumpelection,method="mean_adj")
#' plot(effect_trump)
plot.event2car_range <- function(x,...,
event_color = "red",
event_linetype = "twodash",
event_size = 1,
event_label_size = 3,
line_color = "black",
background_color = "gray",
background_alpha = 0.5,
point_size = 0.2,
point_alpha = 0.1,
axis_text_size = 8,
axis_title_size = 10,
show_method = TRUE){
if (!class(x) == "event2car_range") {
stop("Plot works for event2car_range xs only.")
}
if (class(x$car_timeseries) == "zoo") {
use <- data.frame(x$car_timeseries)
use$date <- row.names(use)
use <- stats::reshape(use, idvar="date",
varying = 1:(ncol(use)-1),
v.names = "car",
direction="long")
row.names(use) <- NULL
names(use) <- c("date","firm","car")
use$date <- as.Date(use$date)
}
if (class(x$car_timeseries) == "data.frame") {
use <- x$car_timeseries
row.names(use) <- NULL
}
use$firm <- as.character(use$firm)
use$event <- ifelse(use$date %in% x$event_date,1,0)
use$label <- ifelse(use$event == 1 & use$firm %in% unique(use$firm)[1], as.character(use$date),NA)
if (show_method==TRUE) {
if (x$method == "mean_adj") {
method = "Mean-adjusted model"
}
if (x$method == "mrkt_adj_within") {
method = "Market-adjusted model\n(within estimation)"
}
if (x$method == "mrkt_adj_out") {
method = "Market-adjusted model\n(out-of-sample estimation)"
}
} else {method = ""}
utils::globalVariables(c("car", "label", "firm"))
p <- ggplot2::ggplot(use,aes(date,car,label = label))+
geom_rect(mapping=aes(xmin=min(use$date), xmax=max(use$date), ymin=0, ymax=Inf), color=background_color,
alpha=background_alpha,fill=background_color)+
geom_point(aes(color=firm),alpha=0.1)+
geom_smooth(aes(color=firm),method="loess",alpha=point_alpha,size=point_size)+
geom_smooth(color=line_color,method="loess")+
geom_vline(xintercept = unique(use$date[use$event==1]),
color=event_color,linetype=event_linetype,size=event_size)+
geom_label(aes(y=max(use$car)),size=event_label_size,na.rm=TRUE) +
scale_color_grey(start = 0.9, end = 0.1) +
scale_x_date(labels = date_format("%Y-%m"))+
labs(y="Cumulative Abnormal Return",x="",
color="",
title = method)+
theme_minimal()+
theme(legend.position = "none",
panel.grid = element_blank(),
axis.text = element_text(size=axis_text_size),
axis.title = element_text(size=axis_title_size))
return(p)
}
devtools::check()
devtools::check()
install_github("LisaLechner/event2car")
devtools::install_github("LisaLechner/event2car")
library(event2car)
?event2car
?plot.event2car_range
"2018-09-01"
car_lag = 1
car_lead = 5
eventperiod_start <- event-car_lag
eventperiod_end <- event+car_lead
seq(eventperiod_start:eventperiod_end)
event_date <- "2018-09-01"
event <- as.Date("2018-09-01")
event
eventperiod_start <- event-car_lag
eventperiod_end <- event+car_lead
seq(eventperiod_start:eventperiod_end)
seq.Date(eventperiod_start:eventperiod_end)
seq(as.Date(eventperiod_start):as.Date(eventperiod_end))
seq(as.Date(eventperiod_start):as.Date(eventperiod_end),'days')
seq(as.Date(eventperiod_start):as.Date(eventperiod_end),by='days')
seq(as.Date(eventperiod_start),as.Date(eventperiod_end),by='days')
seq(eventperiod_start,eventperiod_end,by='days')
weekdays(seq(eventperiod_start,eventperiod_end,by='days'))
weekdays(event)
event <- event+1
eventperiod_start <- event-car_lag
eventperiod_end <- event+car_lead
weekdays(event)
weekdays(seq(eventperiod_start,eventperiod_end,by='days'))
names(table(weekdays(index(returns))))
library(zoo)
names(table(weekdays(index(returns))))
unique(weekdays(index(returns)))!=unique(weekdays(index(regressor)))
# define non-trading days
nontradingdays <- c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday") %in% unique(weekdays(index(returns)))
event
devtools::document()
devtools::build()
devtools::document()
devtools::build()
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(stringi,quanteda,readtext,
stringr,
dplyr,tidyverse,plyr,
ggplot2,ggrepel,gridExtra,
dmdScheme)
names(dt)
path1 = "/Users/lisalechner/Dropbox/current_projects/godigital/"
path2 = "/Users/lisalechner/Google Drive/current_projects/eccn/"
path1 = "/Users/c4021106/Dropbox/current_projects/godigital/"
path2 = "/Users/c4021106/Google Drive/current_projects/eccn/"
percent_1st <- 2
percent_2nd <- 50
dt <- readRDS(paste0(path2,"/data/esp_19800101_20181231_es.RDS"))
dt$text <- as.character(dt$text)
dt$date <- as.Date(dt$date,"%Y-%m-%d")
summary(dt$date)
names(dt)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(stringi,quanteda,readtext,
stringr,
dplyr,tidyverse,plyr,
ggplot2,ggrepel,gridExtra,
dmdScheme)
path1 = "/Users/lisalechner/Dropbox/current_projects/godigital/"
path2 = "/Users/lisalechner/Google Drive/current_projects/eccn/"
path1 = "/Users/c4021106/Dropbox/current_projects/godigital/"
path2 = "/Users/c4021106/Google Drive/current_projects/eccn/"
percent_1st <- 2
percent_2nd <- 50
dt <- readRDS(paste0(path2,"/data/mlt_19840101_20181231_mt.RDS"))
dt$text <- as.character(dt$text)
names(dt)
dt$date <- as.Date(dt$date,"%Y-%m-%d")
summary(dt$date)
names(dt)
